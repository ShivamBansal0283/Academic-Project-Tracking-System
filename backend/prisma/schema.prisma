// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")     // direct (migrations)

}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ProjectStatus {
  NEW
  ACTIVE
  COMPLETED
  REJECTED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      Role
  passwordHash String
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relations
  teachingCourses Course[] @relation("TeacherCourses")
  enrollments     Enrollment[]
  projectsCreated Project[] @relation("ProjectCreator")
  teamMemberships TeamMember[]
  teamsLed        Team[]     @relation("TeamLeader")

  Invitation Invitation[]

  StudentProject StudentProject[]
}

model Department {
  id   String @id @default(cuid())
  name String
  code String  @unique
  courses Course[]
  projects Project[]
}

model Course {
  id           String   @id @default(cuid())
  name         String
  code         String   @unique
  description  String?
  createdAt    DateTime @default(now())
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  teacher      User     @relation("TeacherCourses", fields: [teacherId], references: [id])
  teacherId    String
  enrollments  Enrollment[]
  projects     Project[]
}

model Enrollment {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
  @@unique([courseId, studentId])
}

model Project {
  id           String         @id @default(cuid())
  title        String
  description  String
  status       ProjectStatus  @default(NEW)
  deadline     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  course       Course   @relation(fields: [courseId], references: [id])
  courseId     String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  createdBy    User     @relation("ProjectCreator", fields: [createdById], references: [id])
  createdById  String
  team         Team?
  tasks        Task[]
  rejectionReason String?

  StudentProject StudentProject[]
}

model Team {
  id        String   @id @default(cuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @unique
  leader    User     @relation("TeamLeader", fields: [leaderId], references: [id])
  leaderId  String
  createdAt DateTime @default(now())
  members   TeamMember[]
  invitations Invitation[]
  submissions Submission[]
}

model TeamMember {
  id        String  @id @default(cuid())
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  role      String  // "Leader" | "Member"
  joinedAt  DateTime @default(now())
  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  email     String
  invitedBy User     @relation(fields: [invitedById], references: [id])
  invitedById String
  respondedAt DateTime?         // <-- add this line
  status    String   @default("PENDING") // PENDING | ACCEPTED | DECLINED
  createdAt DateTime @default(now())
}

model Task {
  id          String     @id @default(cuid())
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  deadline    DateTime
  weightage   Int
  status      TaskStatus @default(PENDING)
  grade       Int?
  feedback    String?
  submissions Submission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Submission {
  id         String   @id @default(cuid())
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  submittedAt DateTime @default(now())
  notes      String?
  files      File[]
  grade        Int?
  feedback     String?
  @@unique([taskId, teamId],name: "taskId_teamId")
}




model File {
  id            String       @id @default(cuid())
  originalName  String
  filename      String
  mime          String
  size          Int
  url           String
  submission    Submission?  @relation(fields: [submissionId], references: [id])
  submissionId  String?
  createdAt     DateTime     @default(now())
}



model StudentProject {
  id         String        @id @default(cuid())
  studentId  String
  projectId  String
  status     ProjectStatus
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  student    User          @relation(fields: [studentId], references: [id])
  project    Project       @relation(fields: [projectId], references: [id])

  @@unique([studentId, projectId], name: "studentId_projectId")
}